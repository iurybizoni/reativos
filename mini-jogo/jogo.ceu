/* Ao longo da semana eu vou melhorando o codigo e fazendo os devidos ajustes que eu 
ja sei que devo fazer (eg. colocar os targets que morrem com 2 cliques na mesma classe, 
nome de algumas variaveis, ajuste da velocidade e quantidade e etc.).*/

#include "sdl.ceu"

#define BLOCK_H 20
#define BLOCK_W 20

input void SDL_REDRAW;
input void SDL_QUIT;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;


var int win_w;
var int win_h;
var _SDL_Window* win;
var int intervalo=5000;
var int intervalo2=7000;

    finalize
        win = _SDL_CreateWindow("Example 1",
                            0, 0, 640, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

_assert(win != null);

_SDL_GetWindowSize(win, &win_w, &win_h);

native do
	SDL_Renderer* REN = NULL;
end

    finalize
        _REN = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(_REN);
    end

var _SDL_Rect bg;
    bg.w = win_w;
    bg.h = win_h;
    bg.x = 0;
    bg.y = 0;

var _SDL_Color bg_clr;
    bg_clr.r = 0xFF;
    bg_clr.g = 0xFF;
    bg_clr.b = 0xFF;


interface Global with
	event void kill;
end

event void kill;

class Rect with
	var _SDL_Rect target;
	var int v;
	var int posicaoInicial;
	var int button;

do
	var _SDL_Color clr;
        clr.r = 0xFF;
        clr.g = 0x00;
        clr.b = 0x00;
	var int checkRangeEsquerda = 640/2-BLOCK_W-60;
	var int checkRangeDireita = 640/2-BLOCK_W-10;
	var int checkCol = 640/2-30;
	var int incr = 1;
	if posicaoInicial == 1 then
		checkRangeEsquerda = 640/2+10;
		checkRangeDireita = 640/2+60;
		checkCol = 640/2+10;
		incr = -1;
		clr.r = 0x00;
		clr.g = 0x00;
		clr.b = 0xFF;
	end

	par/or do
		loop do
			par/or do

		        await (1000/this.v) ms;
		        target.x = target.x + incr;
     			with

				if this.target.x == checkCol then
					emit global:kill;
					await FOREVER;
				else
					var _SDL_MouseButtonEvent* button;
					button = await SDL_MOUSEBUTTONDOWN;
					if button:button == this.button then
		
						if this.target.x >= checkRangeEsquerda and this.target.x <= checkRangeDireita then

							break;

						end
					end
		   		end
			end		
		end
    with
	    loop do
	        await SDL_REDRAW;
	        _SDL_SetRenderDrawColor(_REN, clr.r,clr.g,clr.b,0);
            _SDL_RenderFillRect(_REN, &target);
	    end
    end
end


class RectS with
	var _SDL_Rect target;
	var int v;
do
	var _SDL_Color clr;
        clr.r = 0x00;
        clr.g = 0xFF;
        clr.b = 0xFF;

	par/or do
        loop do
            par/or do
		        await (1000/this.v) ms;
		        target.x = target.x + 1;
				
			with
				if this.target.x >= 640/2-30 then
					emit global:kill;
				else
				var _SDL_MouseButtonEvent* button;
				button = await SDL_MOUSEBUTTONDOWN;
				if button:button == _SDL_BUTTON_LEFT and button:clicks == 2 then

					if this.target.x >= 640/2-BLOCK_W-60 then
			
						break;
					
					end
		   			end
				end
			end
        end
    with
        loop do
            await SDL_REDRAW;
            _SDL_SetRenderDrawColor(_REN, clr.r,clr.g,clr.b,0);
            _SDL_RenderFillRect(_REN, &target);
        end
    end
end
class RectSR with
	var _SDL_Rect target;
	var int v;
do
	var _SDL_Color clr;
        clr.r = 0x00;
        clr.g = 0xFF;
        clr.b = 0x00;

	par/or do
        loop do
            par/or do
		        await (1000/this.v) ms;
		        target.x = target.x - 1;
				
			with
				if this.target.x <= 640/2+10 then
					emit global:kill;
				else
				var _SDL_MouseButtonEvent* button;
				button = await SDL_MOUSEBUTTONDOWN;
				if button:button == _SDL_BUTTON_RIGHT and button:clicks == 2 then

					if this.target.x <= 640/2+60 then
			
						break;
					
					end
		   			end
				end
			end
        end
    with
        loop do
            await SDL_REDRAW;
            _SDL_SetRenderDrawColor(_REN, clr.r,clr.g,clr.b,0);
            _SDL_RenderFillRect(_REN, &target);
        end
    end
end
var _SDL_Rect block;

	block.w = BLOCK_W;
    block.h = BLOCK_H;
	block.x = win_w/2-10;
	block.y = 300;


var _SDL_Color blockColor;
    blockColor.r = 0x00;
    blockColor.g = 0x00;
    blockColor.b = 0x00;

var _SDL_Rect leftRange;

	leftRange.w = 50;
	leftRange.h = 5;
	leftRange.x = win_w/2-60;
	leftRange.y = 330;

var _SDL_Rect rightRange;

	rightRange.w = 50;
	rightRange.h = 5;
	rightRange.x = (win_w/2)+10;
	rightRange.y = 330;

_srand(_time(null));

_SDL_SetRenderDrawColor(_REN, 0xFF,0xFF,0xFF,0x00);
_SDL_RenderFillRect(_REN, null);

/*GAME BEGINS */

par/or do
			await SDL_QUIT;
with
	await global:kill;
with
	loop do
		await SDL_REDRAW;

		_SDL_SetRenderDrawColor(_REN, 0xFF,0xFF,0xFF,0);
        _SDL_RenderFillRect(_REN, &bg);

	end

with

		do
			pool Rect[] rs;
			loop do
				await (_rand()%intervalo) ms;
                spawn Rect in rs with
					this.posicaoInicial = 00;
                    this.target.x = 00;
                    this.target.y = 300;
                    this.target.w = 20;
                    this.target.h = 20;
                    this.v      = 10 + _rand()%200;
					this.button = _SDL_BUTTON_LEFT;
                end;
			end
		end


with


        do
            pool Rect[] rs;
            loop do
                await (_rand()%intervalo) ms;
                spawn Rect in rs with
					this.posicaoInicial = 1;
                    this.target.x = win_w-20;
                    this.target.y = 300;
                    this.target.w = 20;
                    this.target.h = 20;
                    this.v      = 10 + _rand()%200;
					this.button = _SDL_BUTTON_RIGHT;
				end;
            end
        end


with

        do
            pool RectSR[] rs;
            loop do

                await (_rand()%intervalo2) ms;
                spawn RectSR in rs with
                    this.target.x = win_w-BLOCK_W;
                    this.target.y = 300;
                    this.target.w = 20;
                    this.target.h = 20;
                    this.v      = 10 + _rand()%100;
				end;
            end
        end

with


        do
            pool RectS[] rs;
            loop do
				intervalo2 = intervalo2 * 0.9;
                await (_rand()%intervalo) ms;
                spawn RectS in rs with
                    this.target.x = 00;
                    this.target.y = 300;
                    this.target.w = 20;
                    this.target.h = 20;
                    this.v      = 10 + _rand()%100;
				end;
            end
        end


with

	loop do
		await SDL_REDRAW;

		_SDL_SetRenderDrawColor(_REN, blockColor.r,blockColor.b,blockColor.g,0);
        _SDL_RenderFillRect(_REN, &block);

		_SDL_SetRenderDrawColor(_REN, 0xFF,0x00,0x00,0);
        _SDL_RenderFillRect(_REN, &leftRange);

		_SDL_SetRenderDrawColor(_REN, 0x00,0x00,0xFF,0);
        _SDL_RenderFillRect(_REN, &rightRange);

		_SDL_RenderPresent(_REN);
	end
end

escape 0;
